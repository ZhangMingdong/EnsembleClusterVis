#pragma once
#include <QList>
#include "BasicStruct.h"

class DataField;
class UnCertaintyArea;
/*
	This class used to capsulate the features generated by an isovalue
	Mingdong
	2018/12/04
*/
class FeatureSet
{
public:
	FeatureSet(DataField* pData,double _dbIsoValue,int nWidth,int nHeight,int _nEnsembleLen,int nFocusX,int nFocusY,int nFocusW,int nFocusH);
	~FeatureSet();
private:
	DataField* _pData;									// reference to the data set
	QList<QList<ContourLine>> _listContour;				// list of contours of ensemble members
	QList<ContourLine> _listContourMinE;				// list of contours of minimum of E
	QList<ContourLine> _listContourMaxE;				// list of contours of maximum of E
	QList<ContourLine> _listContourMeanE;				// list of contours of mean of E
	double _dbIsoValue = 0;								// isovalue of this feature set;

	QList<ContourLine> _listContourMedianE;				// list of contours of median of E
	QList<ContourLine> _listContourMinValid;			// list of contours of minimum of valid members
	QList<ContourLine> _listContourMaxValid;			// list of contours of maximum of valid members
	QList<ContourLine> _listContourMinHalf;				// list of contours of minimum of half valid members
	QList<ContourLine> _listContourMaxHalf;				// list of contours of maximum of half valid members

	int _nWidth;
	int _nHeight;
	int _nGrids;								// _nWidth*_nHeight
	int _nEnsembleLen;
	int _nFocusX;
	int _nFocusY;
	int _nFocusW;
	int _nFocusH;

	double* _gridHalfMax;			// maximum of half valid ensemble results
	double* _gridHalfMin;			// minimum of half valid ensemble results
	double* _gridValidMax;			// maximum of valid ensemble results
	double* _gridValidMin;			// minimum of valid ensemble results
	int _nMedianIndex = -1;			// index of median of the contour
	double* _pSDF;					// data of signed distance function
	double* _pSortedSDF;			// data of signed distance function
	bool * _pSet;					// set state of the grid point given iso-value
	int *_pSetBandDepth;			// sBandDepth
	int *_pRegionType;				// region type of each member.0:outlier,1-100%,2-50%.
	int _nOutlierThreshold = 1;		// threshold for outliars

	QList<UnCertaintyArea*> _listAreaValid;			// list of the uncertainty area of union of valid members
	QList<UnCertaintyArea*> _listAreaHalf;			// list of the uncertainty area of union of half valid members
public:
	QList<QList<ContourLine>>& GetContours() { return _listContour; }
	QList<ContourLine> GetContourMin() { return _listContourMinE; }
	QList<ContourLine> GetContourMax() { return _listContourMaxE; }
	QList<ContourLine> GetContourMean(){ return _listContourMeanE; }
	QList<ContourLine> GetContourMedian() { return _listContourMedianE; }
	void GenerateContours();

	const double* GetValidMax() { return _gridValidMax; };
	const double* GetValidMin() { return _gridValidMin; };
	const double* GetHalfMax() { return _gridHalfMax; };
	const double* GetHalfMin() { return _gridHalfMin; };
	const double* GetMedian();
	double* GetSDF() { return _pSDF; }
	double* GetSDF(int l) { return _pSDF + l * _nGrids; }
	double* GetSortedSDF(int l) { return _pSortedSDF + l * _nGrids; }
	bool* GetSet(int l) { return _pSet + l * _nGrids; }
	int GetDepth(int l) { return _pSetBandDepth[l]; }
	int GetRegionType(int l) { return _pRegionType[l]; }
	void BuildSortedSDF();
	void CalculateSet(double dbIsoValue);
	virtual QList<UnCertaintyArea*> GetUncertaintyAreaValid() { return _listAreaValid; }
	virtual QList<UnCertaintyArea*> GetUncertaintyAreaHalf() { return _listAreaHalf; }
private:
	void sortBuf(const double* pS, double* pD);	// space segmentation
	void generateContourImp(const QList<ContourLine>& contourMin, const QList<ContourLine>& contourMax, QList<UnCertaintyArea*>& areas);

};

